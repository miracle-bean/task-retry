<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.task.retry.mapper.TaskMapper">

    <resultMap id="task" type="com.task.retry.entity.model.TaskDO">
        <result column="id" property="id"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="business_type" property="businessType"/>
        <result column="business_id" property="businessId"/>
        <result column="payload" property="payload"/>
        <result column="state" property="state"/>
        <result column="max_retry_count" property="maxRetryCount"/>
        <result column="executed_count" property="executedCount"/>
        <result column="error_message" property="errorMessage"/>
        <result column="order" property="order"/>
        <result column="async" property="async"/>
        <result column="version" property="version"/>
    </resultMap>

    <sql id="baseColumn">
        t.id,
		t.create_time,
		t.update_time,
		t.business_type,
		t.business_id,
		t.payload,
		t.state,
		t.max_retry_count,
		t.executed_count,
		t.error_message,
        t.order,
        t.async,
		t.version,
    </sql>

    <select id="pageList" resultMap="task">
        SELECT
        <include refid="baseColumn"/>
        FROM task AS t
        <where>
            <if test="request.businessType != null and request.businessType != ''">
                and t.business_type = #{request.businessType}
            </if>
            <if test="request.businessId != null and request.businessId != ''">
                and t.business_id = #{request.businessId}
            </if>
            <if test='request.idList != null and request.idList.size > 0'>
                and t.id in
                <foreach collection="request.idList" item="id" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
            <if test='request.stateList != null and request.stateList.size > 0'>
                and t.state in
                <foreach collection="request.stateList" item="state" open="(" close=")" separator=",">
                    #{state}
                </foreach>
            </if>
            <if test="request.isLessMaxTimes != null and request.isLessMaxTimes != 'TRUE'">
                and t.executed_count &lt; t.max_retry_count
            </if>
            <if test="request.isLessMaxTimes != null and request.isLessMaxTimes != 'FALSE'">
                and t.executed_count &gt;= t.max_retry_count
            </if>
        </where>
        order by t.order desc, t.id desc
        LIMIT #{offset}, #{pageSize}
    </select>

    <insert id="save" parameterType="com.task.retry.entity.model.TaskDO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO task (`business_type`, `business_id`, `payload`, `state`, `max_retry_count`, `executed_count`,
                          `error_message`, `order`, `async`)
        values (#{businessType}, #{businessId}, #{payload}, #{state}, #{maxRetryCount}, #{executedCount},
                #{errorMessage}, #{order}, #{async});
    </insert>

    <select id="getById" parameterType="java.lang.Long" resultMap="task">
        SELECT
        <include refid="baseColumn"/>
        FROM task AS t
        WHERE t.id = #{id}
    </select>

    <update id="updateById" parameterType="com.task.retry.entity.model.TaskDO">
        UPDATE task
        SET `business_type`   = #{businessType},
            `business_id`     = #{businessId},
            `payload`         = #{payload},
            `state`           = #{state},
            `max_retry_count` = #{maxRetryCount},
            `executed_count`  = #{executedCount},
            `error_message`   = #{errorMessage},
            `order`           = #{order},
            `async`           = #{async},
            `version`         = version + 1
        WHERE id = #{id}
        and version = #{version}
        <if test='stateList != null and stateList.size > 0'>
            and t.state in
            <foreach collection="stateList" item="state" open="(" close=")" separator=",">
                #{state}
            </foreach>
        </if>
    </update>

</mapper>

